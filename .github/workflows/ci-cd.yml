name: CI Pipeline

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  django-checks:
    name: Django System Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Poetry installation
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/pypoetry
          ~/.local/bin/poetry
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Create environment file
      run: |
        cat > .env << 'EOF'
        DEBUG=false
        SECRET_KEY=test-secret-key-for-ci
        DATABASE_URL=sqlite:///db.sqlite3
        REDIS_URL=redis://localhost:6379/0
        ALLOWED_HOSTS=localhost,127.0.0.1
        EOF

    - name: Run Django system checks
      run: |
        source .venv/bin/activate
        ENVIRONMENT=test python manage.py check

    - name: Run pre-commit hooks
      env:
        SKIP: no-commit-to-branch
      run: |
        source .venv/bin/activate
        pre-commit run

  test:
    name: Tests with Coverage
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    needs: [django-checks]

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: backend
          POSTGRES_DB: backend
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
        - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Poetry installation
      uses: actions/cache@v4
      with:
        path: |
          ~/.local/share/pypoetry
          ~/.local/bin/poetry
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Create environment file
      run: |
        cat > .env << 'EOF'
        DEBUG=false
        SECRET_KEY=test-secret-key-for-ci
        DATABASE_URL=postgres://backend:password@localhost:5432/backend
        REDIS_URL=redis://localhost:6379/0
        ALLOWED_HOSTS=localhost,127.0.0.1
        EOF

    - name: Run tests
      run: |
        source .venv/bin/activate
        # Run tests with optimized settings for CI/CD
        # --dist=loadgroup: distribute tests by module for better caching
        # -n auto: use all available CPU cores
        # --maxfail=10: fail fast after 10 failures
        ENVIRONMENT=test python -m pytest apps/ \
          -v \
          --tb=short \
          --cov=apps \
          --cov-report=xml \
          -n auto \
          --dist=loadgroup \
          --maxfail=10

    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  deploy-develop:
    name: Deploy to Develop Environment
    runs-on: ubuntu-latest
    environment: test
    needs: [django-checks]
    # Only run deployment on push to master (not on pull requests) and only if all checks passed
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
    - name: Deploy to EC2 Develop Server
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.DEVELOP_HOST }}
        username: ${{ secrets.DEVELOP_USERNAME }}
        key: ${{ secrets.DEVELOP_SSH_KEY }}
        script: |
          set -Eeuo pipefail
          trap 'echo "❌ Error at line $LINENO"; exit 1' ERR

          # Navigate to application directory
          cd /home/ubuntu/maivietland/backend

          # Pull latest changes from master
          git fetch --all --prune
          git pull origin master

          # Update API documentation version in .env file
          API_DOC_VERSION=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          if grep -q "^API_DOC_VERSION=" .env 2>/dev/null; then
            sed -i "s/^API_DOC_VERSION=.*/API_DOC_VERSION=$API_DOC_VERSION/" .env
          else
            echo "API_DOC_VERSION=$API_DOC_VERSION" >> .env
          fi

          # Activate virtual environment and install dependencies
          export PATH="$HOME/.local/bin:$PATH"
          poetry config virtualenvs.in-project true
          poetry install --no-interaction --no-root --without dev

          # Run database migrations
          poetry run python manage.py migrate --noinput
          poetry run python manage.py collectstatic --noinput
          poetry run python manage.py collect_permissions


          # Update supervisor configuration and restart gunicorn workers
          sudo supervisorctl reread
          sudo supervisorctl update
          sudo supervisorctl restart maivietland-api maivietland-worker maivietland-consume-audit-logs

          # Reload nginx configuration
          sudo nginx -t && sudo nginx -s reload

    - name: Health Check (with retry)
      run: |
        set -Eeuo pipefail
        url="${{ vars.DEVELOP_APP_URL }}/health/"
        for i in {1..10}; do
          status=$(curl -sS -o /dev/null -w "%{http_code}" --max-time 10 "$url") || status="000"
          if [ "$status" = "200" ]; then
            echo "✅ Deploy thành công: 200 OK (attempt $i)"
            exit 0
          fi
          echo "⏳ Chưa sẵn sàng (HTTP $status) — thử lại ($i/10)"; sleep 5
        done
        echo "❌ Deploy thất bại: không nhận được 200 OK sau 10 lần thử"
        exit 1

    - name: Notify Deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        text: "DEVELOP deployment completed with status: ${{ job.status }}"
      env:
        SLACK_WEBHOOK_URL: ${{ vars.SLACK_WEBHOOK_URL }}
