name: CI Pipeline

on:
  pull_request:
    branches: [ master ]
  push:
    branches: [ master ]

env:
  PYTHON_VERSION: "3.12"

jobs:
  test:
    name: Code Quality and Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: backend
          POSTGRES_DB: backend
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Create environment file
      run: |
        cp .env.tpl .env
        sed -i 's/YOUR_SECRET_KEY/test-secret-key-for-ci/' .env
        sed -i 's|postgres://backend:password@localhost:5432/backend|postgres://backend:password@localhost:5432/backend|' .env
        sed -i 's|redis://localhost:6379/0|redis://localhost:6379/0|' .env

    - name: Run code quality checks
      run: |
        source .venv/bin/activate
        python -m mypy . --ignore-missing-imports || echo "MyPy check completed with warnings"

    - name: Run Django checks
      run: |
        source .venv/bin/activate
        ENVIRONMENT=test python manage.py check

    - name: Run migrations
      run: |
        source .venv/bin/activate
        ENVIRONMENT=test python manage.py migrate

    - name: Run tests
      run: |
        source .venv/bin/activate
        ENVIRONMENT=test python -m pytest apps/ -v --tb=short --cov=apps --cov-report=xml

    - name: Upload coverage to Codecov
      if: success()
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false