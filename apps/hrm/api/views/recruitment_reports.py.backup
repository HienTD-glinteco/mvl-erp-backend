from datetime import datetime

from django.db.models import Sum
from django_filters.rest_framework import DjangoFilterBackend
from drf_spectacular.utils import OpenApiExample, OpenApiParameter, extend_schema
from rest_framework import status, viewsets
from rest_framework.decorators import action
from rest_framework.filters import OrderingFilter
from rest_framework.response import Response

from apps.hrm.api.filtersets.recruitment_reports import (
    HiredCandidateReportFilterSet,
    RecruitmentChannelReportFilterSet,
    RecruitmentCostReportFilterSet,
    RecruitmentSourceReportFilterSet,
    StaffGrowthReportFilterSet,
)
from apps.hrm.api.serializers.recruitment_reports import (
    HiredCandidateReportSerializer,
    RecruitmentChannelReportSerializer,
    RecruitmentCostReportSerializer,
    RecruitmentSourceReportSerializer,
    StaffGrowthReportSerializer,
)
from apps.hrm.models import (
    HiredCandidateReport,
    RecruitmentChannelReport,
    RecruitmentCostReport,
    RecruitmentSourceReport,
    StaffGrowthReport,
)
from apps/hrm.utils import get_current_month_range, get_current_week_range




class StaffGrowthReportViewSet(viewsets.ReadOnlyModelViewSet):
    """Read-only viewset for aggregated staff growth reports.
    
    Returns staff growth statistics aggregated by week or month.
    Daily data from the flat model is aggregated based on the period parameter.
    No pagination - returns all results in the filtered date range.
    """

    queryset = StaffGrowthReport.objects.select_related("branch", "block", "department").all()
    serializer_class = StaffGrowthReportSerializer
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    filterset_class = StaffGrowthReportFilterSet
    ordering_fields = ["report_date", "branch__name", "block__name", "department__name"]
    ordering = ["-report_date"]
    pagination_class = None  # No pagination

    def get_queryset(self):
        """Filter and aggregate queryset based on period and date range."""
        queryset = super().get_queryset()
        
        # Get query parameters
        period = self.request.query_params.get("period", "month")
        from_date = self.request.query_params.get("from_date")
        to_date = self.request.query_params.get("to_date")
        
        # Set default date range based on period
        if not from_date or not to_date:
            if period == "week":
                from_date, to_date = get_current_week_range()
            else:  # default to month
                from_date, to_date = get_current_month_range()
        else:
            # Parse dates if provided
            from_date = datetime.strptime(from_date, "%Y-%m-%d").date()
            to_date = datetime.strptime(to_date, "%Y-%m-%d").date()
        
        # Filter by date range
        queryset = queryset.filter(report_date__gte=from_date, report_date__lte=to_date)
        
        # Aggregate by organizational units
        queryset = queryset.values(
            "branch", "branch__name", "block", "block__name", "department", "department__name"
        ).annotate(
            num_introductions=Sum("num_introductions"),
            num_returns=Sum("num_returns"),
            num_new_hires=Sum("num_new_hires"),
            num_transfers=Sum("num_transfers"),
            num_resignations=Sum("num_resignations"),
        ).order_by("branch__name", "block__name", "department__name")
        
        return queryset
    
    def list(self, request, *args, **kwargs):
        """List aggregated staff growth reports."""
        queryset = self.get_queryset()
        
        # Build response with aggregated data
        results = []
        for item in queryset:
            results.append({
                "branch": item.get("branch"),
                "branch_name": item.get("branch__name"),
                "block": item.get("block"),
                "block_name": item.get("block__name"),
                "department": item.get("department"),
                "department_name": item.get("department__name"),
                "num_introductions": item.get("num_introductions", 0),
                "num_returns": item.get("num_returns", 0),
                "num_new_hires": item.get("num_new_hires", 0),
                "num_transfers": item.get("num_transfers", 0),
                "num_resignations": item.get("num_resignations", 0),
            })
        
        return Response(results, status=status.HTTP_200_OK)

    @extend_schema(
        summary="List aggregated staff growth reports",
        description="Retrieve aggregated staff growth statistics by week or month. "
        "Returns total counts for introductions, returns, new hires, transfers, and resignations grouped by organizational units. "
        "Default period is current month. No pagination.",
        tags=["Recruitment Reports"],
        parameters=[
            OpenApiParameter(
                name="period",
                description="Aggregation period (week or month)",
                required=False,
                type=str,
                enum=["week", "month"],
                default="month",
            ),
            OpenApiParameter(
                name="from_date",
                description="Start date (YYYY-MM-DD). Defaults to start of current month/week.",
                required=False,
                type=str,
            ),
            OpenApiParameter(
                name="to_date",
                description="End date (YYYY-MM-DD). Defaults to end of current month/week.",
                required=False,
                type=str,
            ),
        ],
        examples=[
            OpenApiExample(
                "Success",
                value=[
                    {
                        "branch": 1,
                        "branch_name": "Hanoi Branch",
                        "block": 2,
                        "block_name": "Business Block",
                        "department": 3,
                        "department_name": "Sales Department",
                        "num_introductions": 5,
                        "num_returns": 2,
                        "num_new_hires": 10,
                        "num_transfers": 3,
                        "num_resignations": 1,
                    }
                ],
                response_only=True,
            )
        ],
    )
    def list(self, request, *args, **kwargs):
        return super().list(request, *args, **kwargs)
    serializer_class = StaffGrowthReportSerializer
    filterset_class = StaffGrowthReportFilterSet
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    ordering_fields = ["report_date", "created_at"]
    ordering = ["-report_date"]


@extend_schema_view(
    list=extend_schema(
        summary="List recruitment source reports",
        description="Retrieve nested hire statistics by recruitment source. "
        "Data is organized with sources as columns and organizational units (branch > block > department) as rows.",
        tags=["Recruitment Reports"],
        examples=[
            OpenApiExample(
                "Success",
                value={
                    "success": True,
                    "data": {
                        "count": 2,
                        "next": None,
                        "previous": None,
                        "results": [
                            {
                                "id": 1,
                                "report_date": "2025-10-01",
                                "period_type": "monthly",
                                "branch": 1,
                                "branch_name": "Hanoi Branch",
                                "block": None,
                                "block_name": None,
                                "department": None,
                                "department_name": None,
                                "recruitment_source": 1,
                                "source_name": "LinkedIn",
                                "org_unit_name": "Hanoi Branch",
                                "org_unit_type": "branch",
                                "num_hires": 15,
                                "created_at": "2025-10-15T10:00:00Z",
                                "updated_at": "2025-10-15T10:00:00Z",
                            },
                            {
                                "id": 2,
                                "report_date": "2025-10-01",
                                "period_type": "monthly",
                                "branch": 1,
                                "branch_name": "Hanoi Branch",
                                "block": 2,
                                "block_name": "Business Block",
                                "department": None,
                                "department_name": None,
                                "recruitment_source": 1,
                                "source_name": "LinkedIn",
                                "org_unit_name": "Business Block",
                                "org_unit_type": "block",
                                "num_hires": 10,
                                "created_at": "2025-10-15T10:00:00Z",
                                "updated_at": "2025-10-15T10:00:00Z",
                            },
                        ],
                    },
                },
                response_only=True,
            )
        ],
    ),
    retrieve=extend_schema(
        summary="Retrieve a recruitment source report",
        description="Get detailed information about a specific recruitment source report.",
        tags=["Recruitment Reports"],
    ),
    create=extend_schema(
        summary="Create a recruitment source report",
        description="Create a new recruitment source report record.",
        tags=["Recruitment Reports"],
    ),
    update=extend_schema(
        summary="Update a recruitment source report",
        description="Update an existing recruitment source report.",
        tags=["Recruitment Reports"],
    ),
    partial_update=extend_schema(
        summary="Partially update a recruitment source report",
        description="Partially update an existing recruitment source report.",
        tags=["Recruitment Reports"],
    ),
    destroy=extend_schema(
        summary="Delete a recruitment source report",
        description="Delete a recruitment source report.",
        tags=["Recruitment Reports"],
    ),
)
class RecruitmentSourceReportViewSet(AuditLoggingMixin, BaseModelViewSet):
    """ViewSet for RecruitmentSourceReport model."""

    queryset = RecruitmentSourceReport.objects.select_related(
        "branch", "block", "department", "recruitment_source"
    ).all()
    serializer_class = RecruitmentSourceReportSerializer
    filterset_class = RecruitmentSourceReportFilterSet
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    ordering_fields = ["report_date", "created_at"]
    ordering = ["-report_date"]


@extend_schema_view(
    list=extend_schema(
        summary="List recruitment channel reports",
        description="Retrieve nested hire statistics by recruitment channel. "
        "Data is organized with channels as columns and organizational units (branch > block > department) as rows.",
        tags=["Recruitment Reports"],
        examples=[
            OpenApiExample(
                "Success",
                value={
                    "success": True,
                    "data": {
                        "count": 2,
                        "next": None,
                        "previous": None,
                        "results": [
                            {
                                "id": 1,
                                "report_date": "2025-10-01",
                                "period_type": "monthly",
                                "branch": 1,
                                "branch_name": "Hanoi Branch",
                                "block": None,
                                "block_name": None,
                                "department": None,
                                "department_name": None,
                                "recruitment_channel": 1,
                                "channel_name": "Job Website",
                                "org_unit_name": "Hanoi Branch",
                                "org_unit_type": "branch",
                                "num_hires": 20,
                                "created_at": "2025-10-15T10:00:00Z",
                                "updated_at": "2025-10-15T10:00:00Z",
                            },
                            {
                                "id": 2,
                                "report_date": "2025-10-01",
                                "period_type": "monthly",
                                "branch": 1,
                                "branch_name": "Hanoi Branch",
                                "block": 2,
                                "block_name": "Business Block",
                                "department": None,
                                "department_name": None,
                                "recruitment_channel": 1,
                                "channel_name": "Job Website",
                                "org_unit_name": "Business Block",
                                "org_unit_type": "block",
                                "num_hires": 15,
                                "created_at": "2025-10-15T10:00:00Z",
                                "updated_at": "2025-10-15T10:00:00Z",
                            },
                        ],
                    },
                },
                response_only=True,
            )
        ],
    ),
    retrieve=extend_schema(
        summary="Retrieve a recruitment channel report",
        description="Get detailed information about a specific recruitment channel report.",
        tags=["Recruitment Reports"],
    ),
    create=extend_schema(
        summary="Create a recruitment channel report",
        description="Create a new recruitment channel report record.",
        tags=["Recruitment Reports"],
    ),
    update=extend_schema(
        summary="Update a recruitment channel report",
        description="Update an existing recruitment channel report.",
        tags=["Recruitment Reports"],
    ),
    partial_update=extend_schema(
        summary="Partially update a recruitment channel report",
        description="Partially update an existing recruitment channel report.",
        tags=["Recruitment Reports"],
    ),
    destroy=extend_schema(
        summary="Delete a recruitment channel report",
        description="Delete a recruitment channel report.",
        tags=["Recruitment Reports"],
    ),
)
class RecruitmentChannelReportViewSet(AuditLoggingMixin, BaseModelViewSet):
    """ViewSet for RecruitmentChannelReport model."""

    queryset = RecruitmentChannelReport.objects.select_related(
        "branch", "block", "department", "recruitment_channel"
    ).all()
    serializer_class = RecruitmentChannelReportSerializer
    filterset_class = RecruitmentChannelReportFilterSet
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    ordering_fields = ["report_date", "created_at"]
    ordering = ["-report_date"]


@extend_schema_view(
    list=extend_schema(
        summary="List recruitment cost reports",
        description="Retrieve flat cost data per source/channel with metrics including total cost, hire count, and average cost per hire.",
        tags=["Recruitment Reports"],
        examples=[
            OpenApiExample(
                "Success",
                value={
                    "success": True,
                    "data": {
                        "count": 1,
                        "next": None,
                        "previous": None,
                        "results": [
                            {
                                "id": 1,
                                "report_date": "2025-10-01",
                                "period_type": "monthly",
                                "branch": 1,
                                "branch_name": "Hanoi Branch",
                                "block": None,
                                "block_name": None,
                                "department": None,
                                "department_name": None,
                                "recruitment_source": 1,
                                "source_name": "LinkedIn",
                                "recruitment_channel": None,
                                "channel_name": None,
                                "total_cost": "50000.00",
                                "num_hires": 10,
                                "avg_cost_per_hire": "5000.00",
                                "created_at": "2025-10-15T10:00:00Z",
                                "updated_at": "2025-10-15T10:00:00Z",
                            }
                        ],
                    },
                },
                response_only=True,
            )
        ],
    ),
    retrieve=extend_schema(
        summary="Retrieve a recruitment cost report",
        description="Get detailed information about a specific recruitment cost report.",
        tags=["Recruitment Reports"],
    ),
    create=extend_schema(
        summary="Create a recruitment cost report",
        description="Create a new recruitment cost report record.",
        tags=["Recruitment Reports"],
    ),
    update=extend_schema(
        summary="Update a recruitment cost report",
        description="Update an existing recruitment cost report.",
        tags=["Recruitment Reports"],
    ),
    partial_update=extend_schema(
        summary="Partially update a recruitment cost report",
        description="Partially update an existing recruitment cost report.",
        tags=["Recruitment Reports"],
    ),
    destroy=extend_schema(
        summary="Delete a recruitment cost report",
        description="Delete a recruitment cost report.",
        tags=["Recruitment Reports"],
    ),
)
class RecruitmentCostReportViewSet(AuditLoggingMixin, BaseModelViewSet):
    """ViewSet for RecruitmentCostReport model."""

    queryset = RecruitmentCostReport.objects.select_related(
        "branch", "block", "department", "recruitment_source", "recruitment_channel"
    ).all()
    serializer_class = RecruitmentCostReportSerializer
    filterset_class = RecruitmentCostReportFilterSet
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    ordering_fields = ["report_date", "created_at"]
    ordering = ["-report_date"]


@extend_schema_view(
    list=extend_schema(
        summary="List hired candidate reports",
        description="Retrieve statistics of candidates who accepted offers, separated by source type (introduction, recruitment, return). "
        "For 'introduction' source, employee details are included; for others, only summary statistics.",
        tags=["Recruitment Reports"],
        examples=[
            OpenApiExample(
                "Success - Introduction Source with Employee Details",
                value={
                    "success": True,
                    "data": {
                        "count": 2,
                        "next": None,
                        "previous": None,
                        "results": [
                            {
                                "id": 1,
                                "report_date": "2025-10-01",
                                "period_type": "monthly",
                                "branch": 1,
                                "branch_name": "Hanoi Branch",
                                "block": 2,
                                "block_name": "Business Block",
                                "department": 3,
                                "department_name": "Sales Department",
                                "source_type": "introduction",
                                "employee": 5,
                                "employee_name": "John Doe",
                                "employee_code": "MV001",
                                "num_candidates_hired": 3,
                                "created_at": "2025-10-15T10:00:00Z",
                                "updated_at": "2025-10-15T10:00:00Z",
                            },
                            {
                                "id": 2,
                                "report_date": "2025-10-01",
                                "period_type": "monthly",
                                "branch": 1,
                                "branch_name": "Hanoi Branch",
                                "block": None,
                                "block_name": None,
                                "department": None,
                                "department_name": None,
                                "source_type": "recruitment",
                                "employee": None,
                                "employee_name": None,
                                "employee_code": None,
                                "num_candidates_hired": 15,
                                "created_at": "2025-10-15T10:00:00Z",
                                "updated_at": "2025-10-15T10:00:00Z",
                            },
                        ],
                    },
                },
                response_only=True,
            )
        ],
    ),
    retrieve=extend_schema(
        summary="Retrieve a hired candidate report",
        description="Get detailed information about a specific hired candidate report.",
        tags=["Recruitment Reports"],
    ),
    create=extend_schema(
        summary="Create a hired candidate report",
        description="Create a new hired candidate report record.",
        tags=["Recruitment Reports"],
    ),
    update=extend_schema(
        summary="Update a hired candidate report",
        description="Update an existing hired candidate report.",
        tags=["Recruitment Reports"],
    ),
    partial_update=extend_schema(
        summary="Partially update a hired candidate report",
        description="Partially update an existing hired candidate report.",
        tags=["Recruitment Reports"],
    ),
    destroy=extend_schema(
        summary="Delete a hired candidate report",
        description="Delete a hired candidate report.",
        tags=["Recruitment Reports"],
    ),
)
class HiredCandidateReportViewSet(AuditLoggingMixin, BaseModelViewSet):
    """ViewSet for HiredCandidateReport model."""

    queryset = HiredCandidateReport.objects.select_related("branch", "block", "department", "employee").all()
    serializer_class = HiredCandidateReportSerializer
    filterset_class = HiredCandidateReportFilterSet
    filter_backends = [DjangoFilterBackend, OrderingFilter]
    ordering_fields = ["report_date", "created_at"]
    ordering = ["-report_date"]
